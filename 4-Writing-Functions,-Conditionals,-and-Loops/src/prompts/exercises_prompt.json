[
  {
    "role": "system",
    "content": "You are an expert R programmer and instructor. You are helping the user write course materials for a course on R programming."
  },
  {
    "role": "user",
    "content": "Please create a set of exercises for the following lesson. Include 1 exercise for each section of the lesson and 3-5 exercises the cover material from multiple sections of the lesson. This last set of exercises should reinforce what was learned in multiple sections of this lesson. The content of course is:\n\n# Writing Functions, Conditionals, and Loops\n\nIn our [previous lesson](../3-Subsetting-Sorting-and-Combining-Data/readme.md), we learned about subsetting, sorting and combining datasets in R. We used elementary methods to make this happen. However, to improve the efficiency of our tasks in the long run, we need to leverage the automation power of R by writing reusable functions and implementing control flow using `if/else` statements and loops. In this lesson, we're going to dive into how to implement these methods in R.\n\n---\n\n## Functions in R\n\nWhen performing a unique task repeatedly, creating a custom function can save us time by improving efficiency and readability. Functions are the basic building blocks of R programming, and they in-turn help in building more complex pieces of code. Let's start learning about how to write our own functions!\n\n### Defining a Custom Function\n\nIn R, a set of code can be encapsulated into a function using the `function()` keyword, where each function is a named sequence of statements.\n\n```r\nmy_function <- function() {\n    # Code here\n}\n\n# Call the function\nmy_function()\n```\n\n### Function Arguments\n\nA function, with no arguments, as in the above example, is not very useful. We can add parameters to a function by specifying them in the brackets of the `function()` call.\n\n```r\n# A function to calculate the square of a number\nsquare_num <- function(num) {\n    return(num * num)\n}\n\n# Call the function\nsquare_num(4) # returns 16\n```\n\nIn this function, `num` is an argument to the function and it's passed as a number to the function call.\n\n---\n\n## If/Else Statements\n\nIf/Else statements are used to execute a certain piece of code only when some conditions are met. This can come in handy when we want to control the code flow based on conditional logic.\n\n```r\n# If statement\nnum <- 10\nif (num > 5) {\n   print(\"Number is greater than 5\")\n}\n\n# If/Else statement\nif (num > 15) {\n   print(\"Number is greater than 15\")\n} else {\n   print(\"Number is not greater than 15\")\n}\n```\n\n---\n\n## Iteration with For and While Loops\n\nLoops are powerful programming constructs which allow you to repeat a piece of code a certain number of times. We'll cover two types of loops - `for` and `while`.\n\n### For Loops\n\nA `for` loop is used for iterating over a sequence, usually a vector or a list, or until a certain condition is met.\n\n```r\n# For loop\nfor (i in 1:5) {\n   print(i)\n}\n```\n\nIn the above code, the loop will run 5 times printing values from 1 to 5.\n\n### While Loops\n\nA `while` loop executes repeatedly until a certain condition is met.\n\n```r\n# While loop\nnum <- 0\nwhile (num < 5) {\n    print(num)\n    num <- num + 1\n}\n```\n\nThe loop will run until `num` is smaller than 5.\n\n---\n\n## Putting It All Together\n\nOnce you have understanding about functions, conditionals and loops, you can begin to apply these concepts to automate data processing tasks. For instance, we could write a function that calculates mean of air quality parameters using `for` loop and `if/else` statements, making repetitive tasks much easier.\n\n```r\n# Placeholder for code block using chicago_aqs.csv\n```\n\n---\n\n## Up Next\n\nIn this lesson, we covered some of the fundamental concepts of R programming including how to define our own functions, use control logic with `if/else` statements and automating tasks with `for` and `while` loops. In essence, these concepts should provide the foundation for automating your data processing tasks on air quality datasets.\n\nTaking it a step further, in the [next lesson](../5-Plotting-with-ggplot2/readme.md), we'll delve into creating publication-quality graphics using `ggplot2`!"
  }
]