section_exercises:
  - section_title: Functions in R
    text: >-
      Write a function in R that takes two numbers as input and returns their
      sum.
    solution: sum_num <- function(x, y) {return(x + y)}
    output: For example, sum_num(3, 4) should return 7.
    hints:
      - Use the `function` keyword to define the function.
      - The function should take two parameters.
      - Use the `return` keyword to specify the result.
    explanation: >-
      This function takes two inputs, adds them together and returns the result.
      It's a simple function that demonstrates how to define functions and use
      parameters in R.
  - section_title: If/Else Statements
    text: >-
      Write an If/Else statement that prints whether a given number is even or
      odd.
    solution: |-
      num <- 4
      if(num %% 2 == 0) {print("Number is even")} else {print("Number is odd")}
    output: For example, for num=4, it should print 'Number is even'.
    hints:
      - Use `%%` operator to get the remainder of a division.
      - An even number gives a remainder of 0 when divided by 2.
    explanation: >-
      This statement checks if a number is divisible by 2 (which means it's
      even). If yes, it prints 'Number is even', otherwise it prints 'Number is
      odd'.
  - section_title: Iteration with Loops
    text: >-
      Write a `for` loop in R that calculates the cumulative sum of an array
      from 1 to 10.
    solution: |-
      cumulative_sum <- 0
      for(i in 1:10) {cumulative_sum <- cumulative_sum + i}
      print(cumulative_sum)
    output: 'It should print the cumulative sum: 55'
    hints:
      - Use `:` operator to get a sequence from 1 to 10.
      - In each iteration, add the current number to `cumulative_sum`.
    explanation: >-
      This loop iterates through the numbers 1 to 10. In each iteration, it adds
      the current number to the cumulative_sum. The final result is the
      cumulative sum of all numbers from 1 to 10.
lesson_exercises:
  - text: >-
      Write a function in R that accepts an array as input and returns its mean
      value.
    solution: mean_value <- function(arr) {return(sum(arr) / length(arr))}
    output: For example, mean_value(c(1,2,3,4)) should return 2.5
    hints:
      - Use the `function` keyword to define the function.
      - >-
        Inside the function, use `sum()` to calculate the total sum of the
        array, and `length()` to get the number of elements.
      - Divide the total sum by the number of elements to get the mean.
    explanation: >-
      This function calculates the mean of an array. It uses the sum function to
      calculate the sum of the elements, and the length function to calculate
      the number of elements. Then it divides the sum by the number of elements
      to get the mean.
  - text: >-
      Write an R function that accepts an integer as input and uses a `while`
      loop to calculate the factorial of the input number.
    solution: |-
      factorial_num <- function(num) {
       factorial = 1
       while(num > 1) {
        factorial = factorial * num 
        num = num - 1
       } 
       return(factorial)
      }
    output: For example, factorial_num(5) should return 120.
    hints:
      - >-
        The factorial of a number is the product of all positive integers less
        than or equal to that number.
      - >-
        Use a `while` loop to multiply all positive integers less than or equal
        to the input number.
    explanation: >-
      This function calculates the factorial of a number. It initializes
      `factorial` to 1. Then it enters a `while` loop, which continues as long
      as `num` is greater than 1. In each iteration, it multiplies `factorial`
      by `num` and then decreases `num` by 1. Finally, it returns the value of
      `factorial`.
  - text: >-
      Write a function in R that accepts an array and a number as input, and
      returns the number of elements in the array that are greater than the
      input number.
    solution: |-
      count_greater <- function(nums, num) { 
       count = 0 
       for(i in nums) { 
       if(i > num) { 
       count = count + 1 
       } 
       } 
       return(count) 
      }
    output: For example, count_greater(c(1,2,3,4,5), 3) should return 2.
    hints:
      - Use a `for` loop to iterate over each element of the array.
      - >-
        Inside the loop, use an `if` statement to check if the current element
        is greater than the input number.
      - If it is, increment a counter.
    explanation: >-
      This function counts the number of elements in an array that are greater
      than a given number. It accomplishes this by looping over each element in
      the array. For each element, it checks if it is greater than the input
      number. If it is, it increments a counter. The final count is returned.
