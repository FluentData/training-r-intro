section_exercises:
  - section_title: Viewing Your Data Frame
    text: >-
      Create a data frame named `exam_scores` with the columns `name`,
      `math_score`, `english_score` and `science_score`. View the first and last
      3 rows of `exam_scores` using the `head()` and `tail()` functions
      respectively.
    solution: >-
      exam_scores <- data.frame(name = c('Alice', 'Bob', 'Charlie', 'David',
      'Eve'), math_score = c(95, 88, 92, 84, 98), english_score = c(87, 91, 84,
      92, 85), science_score = c(89, 85, 95, 88, 96))


      #First 3 rows

      head(exam_scores, 3)


      #Last 3 rows

      tail(exam_scores, 3)
    output: |2-
            name math_score english_score science_score
      1 Alice         95            87           89
      2 Bob           88            91           85
      3 Charlie       92            84           95

            name math_score english_score science_score
      3 Charlie       92            84           95
      4 David         84            92           88
      5 Eve           98            85           96
    hints:
      - Use the `data.frame()` function to create a data frame.
      - >-
        Use `head()` and `tail()` functions to view the first and last rows of a
        data frame.
    explanation: >-
      This exercise introduces you to the process of creating and examining data
      frames using the `head()`, `tail()` and `View()` functions. `head()` and
      `tail()` functions by default show the first and last 6 rows of a data set
      respectively. However, you can specify the number of rows in the argument.
  - section_title: Subsetting Your Data
    text: >-
      From the `exam_scores` data frame created in the previous exercise, subset
      the `math_score` column using both `[]` and `$`. Additionally, use the
      `filter()` function to return rows where `math_score` is greater than 90.
    solution: |-
      #Subset math_score column using []
      exam_scores[, 'math_score']

      #Subset math_score column using $
      exam_scores$math_score

      #Filter rows where math_score > 90
      filter(exam_scores, math_score > 90)
    output: |2-
       [1] 95 88 92 84 98
       [1] 95 88 92 84 98
             name math_score english_score science_score
      1 Alice         95            87           89
      2 Charlie       92            84           95
      3 Eve           98            85           96
    hints:
      - Use `[]` and `$` to subset specific columns from the data frame.
      - >-
        Use `filter()` from `dplyr` package to subset rows based on their
        values.
    explanation: >-
      This exercise reinforces your understanding of subsetting data frames.
      Using `[]` or `$`, you can extract specific columns, and `filter()` from
      the `dplyr` package lets you subset rows based on their value.
  - section_title: Sorting Data Frames
    text: >-
      From the `exam_scores` data frame, sort the data set by `math_score` in
      ascending order and `english_score` in descending order.
    solution: |-
      # Sort by math_score in ascending order
      arrange(exam_scores, math_score)

      # Sort by english_score in descending order
      arrange(exam_scores, desc(english_score))
    output: |2-
            name math_score english_score science_score
      1 David         84            92           88
      2 Bob           88            91           85
      3 Charlie       92            84           95
      4 Alice         95            87           89
      5 Eve           98            85           96

             name math_score english_score science_score
      1 David         84            92           88
      2 Bob           88            91           85
      3 Alice         95            87           89
      4 Eve           98            85           96
      5 Charlie       92            84           95
    hints:
      - Use `arrange()` function from `dplyr` package to sort data frames
      - >-
        For descending order, wrap the column name with `desc()` function inside
        `arrange()`.
    explanation: >-
      This exercise helps understand the process of sorting data frames using
      the `arrange()` function. You can sort the data in ascending order by
      simply passing the column-names as arguments to `arrange()`. To sort in
      descending order, wrap the column name with `desc()` function.
  - section_title: Combining Data Frames
    text: >-
      Create another data frame `exam_scores2` with similar columns as
      `exam_scores` but different data. Combine `exam_scores` and `exam_scores2`
      using the `bind_rows()` function.
    solution: >-
      exam_scores2 <- data.frame(name = c('Frank', 'Grace', 'Harry'), math_score
      = c(90, 85, 88), english_score = c(84, 89, 90), science_score = c(86, 80,
      92))


      # Combine exam_scores and exam_scores2

      bind_rows(exam_scores, exam_scores2)
    output: |2-
            name math_score english_score science_score
      1  Alice         95            87           89
      2  Bob           88            91           85
      3  Charlie       92            84           95
      4  David         84            92           88
      5  Eve           98            85           96
      6  Frank         90            84           86
      7  Grace         85            89           80
      8  Harry         88            90           92
    hints:
      - >-
        Create `exam_scores2` using `data.frame()` similar to the first
        exercise.
      - >-
        Use `bind_rows()` function from `dplyr` package to combine similar data
        frames.
    explanation: >-
      This exercise showcases your skill in combining similar data frames using
      the `bind_rows()` function. This function is beneficial when you have data
      about the same variables spread across different data frames and want to
      analyze them together.
lesson_exercises:
  - text: >-
      Create two data frames `students` and `scores` with corresponding student
      ids. Combine them into a single data frame and arrange it by scores in
      descending order. Also, filter students who scored more than 80.
    solution: >-
      students <- data.frame(id = 1:5, name = c('Alice', 'Bob', 'Charlie',
      'David', 'Eve'))

      scores <- data.frame(id = 1:5, score = c(95, 88, 92, 84, 98))


      # Combining data frames

      combined <- bind_rows(students, scores)


      # Arranging in descending order

      combined <- arrange(combined, desc(score))


      # Filtering students with score > 80

      filter(combined, score > 80)
    output: ''
    hints:
      - Use `data.frame()` to create the `students` and `scores` data frames.
      - Use `bind_rows()` to combine the data frames
      - Use `arrange()` with `desc()` to sort in descending order.
      - Use `filter()` to select students who scored more than 80.
    explanation: >-
      This problem draws from multiple sections of the lesson including creating
      data frames, combining them, subsetting based on conditions and arranging
      them. The solution involves combining `students` and `scores` with
      matching `id` columns, arranging based on `score` and then filtering
      students who scored more than 80.
  - text: >-
      Create two data frames `subjects` and `marks` for five students. Combine
      them, filter students with `maths` marks more than 90 and arrange in
      descending order of `science` marks.
    solution: >-
      students <- data.frame(name = c('Alice', 'Bob', 'Charlie', 'David',
      'Eve'))

      marks <- data.frame(name = c('Alice', 'Bob', 'Charlie', 'David', 'Eve'),
      maths = c(95, 88, 92, 84, 98), english = c(87, 91, 84, 92, 85), science =
      c(89, 85, 95, 88, 96))


      # Combining data frames

      combined <- bind_rows(students, marks)


      # Filtering students with maths > 90

      above_90_math <- filter(combined, maths > 90)


      # Arranging in descending order of science

      arrange(above_90_math, desc(science))
    output: ''
    hints:
      - Use `data.frame()` to create the `students` and `marks` data frames.
      - Use `bind_rows()` to combine the data frames
      - Use `filter()` to select students with maths marks more than 90.
      - >-
        Use `arrange()` with `desc()` to sort in descending order of science
        marks.
    explanation: >-
      This problem draws from multiple sections of the lesson including creating
      data frames, combining them, subsetting based on conditions and arranging
      in a particular order. The solution involves combining `students` and
      `marks` data frames, filtering students with maths marks more than 90 and
      then arranging them according to science marks in descending order.
  - text: >-
      Create a data frame `grades` with the columns `student_Name`, `Math`,
      `English`, `Science`. View the first and last 3 rows, order it by `Math`
      in descending order and by `English` in ascending order. Get the values of
      `Science` column.
    solution: >-
      grades <- data.frame(student_Name = c('Alice', 'Bob', 'Charlie', 'David',
      'Eve'), Math = c(95, 88, 92, 84, 98), English = c(87, 91, 84, 92, 85),
      Science = c(89, 85, 95, 88, 96))


      # View first and last 3 rows

      head(grades, 3)

      tail(grades, 3)


      #Order by Math in descending order and English in ascending order

      arrange(grades, desc(Math), English)


      #Get Science column values

      grades$Science
    output: ''
    hints:
      - Use `data.frame()` to create the `grades` data frame.
      - Use `head()` and `tail()` to view the first and last 3 rows.
      - >-
        Use `arrange()` with `desc()` for descending order and the column-name
        for ascending order.
      - To get specific column values, use `grades$<column-name>`.
    explanation: >-
      This problem combines concepts from multiple sections of the lesson
      including creating data frames, viewing specific rows, ordering based on
      columns and obtaining specific column values.
