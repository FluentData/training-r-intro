section_exercises:
  - section_title: Checking Distributions
    text: >-
      Using the 'quality_air' dataset, get the basic summary of 'ozone' variable
      and then plot its histogram.
    solution: |-
      summary(quality_air$ozone)
      hist(quality_air$ozone)
    output: >-
      'summary' will output minimum, 1st quartile, median, mean, 3rd quartile,
      and maximum. 'hist' will display a histogram.
    hints:
      - Use the summary() function to get statistics.
      - Use the hist() function to plot the histogram.
    explanation: >-
      Getting a brief summary of data and visualizing the distribution is the
      initial step of data analysis. It provides an overview of the data
      variable.
  - section_title: Visual Data Inspection
    text: >-
      Make a scatter plot between 'ozone' and 'temp' variables for the
      'quality_air' dataset. Then plot the density plot for 'ozone'.
    solution: |-
      plot(quality_air$ozone, quality_air$temp)
      plot(density(quality_air$ozone))
    output: 'Two plots will be generated: A scatter plot and a density plot.'
    hints:
      - Use the plot() function for creating scatter and density plots.
    explanation: >-
      Visual Inspection helps to understand data and its relationships better.
      Scatter plots show relationship between two variables. Density plots
      provide a visual representation of data distribution.
  - section_title: 'Checking Data Properties: Outliers and Ranges'
    text: >-
      Check if any of the 'ozone' values in the 'quality_air' dataset is less
      than 0. Then create a boxplot for the same variable.
    solution: |-
      any(quality_air$ozone < 0)
      boxplot(quality_air$ozone, main = 'Boxplot of Ozone', ylab='Ozone')
    output: The 'any()' function will return a boolean. A boxplot will be displayed.
    hints:
      - Use the any() function to check for negative values.
      - To plot a boxplot, use the boxplot() function.
    explanation: >-
      It's important to check if the data values are within expected ranges and
      identify outliers. The any() function can check for specific conditions.
      Boxplots visually summarize data and can help identify outliers.
  - section_title: Automating Quality Assurance
    text: >-
      Write an automated quality assurance function for the 'ozone' variable
      from the 'quality_air' dataset.
    solution: |-
      qa_check <- function(df, var){
          print(summary(df[,var]))
          plot(density(df[,var]))
          print(any(df[,var] < 0))
          boxplot(df[,var])
       }
      qa_check(quality_air, 'ozone')
    output: >-
      The function will print a summary, create a density plot, print a boolean
      checking for negative values and create a boxplot.
    hints:
      - Create a function that takes a data frame and a variable as input.
      - >-
        The function should perform these operations: Print summary, plot
        density, check for negative values and create a boxplot.
    explanation: >-
      Automating this process allows you to perform quality assurance more
      efficiently, which is particularly useful when dealing with multiple
      datasets or variables.
lesson_exercises:
  - text: >-
      Write a function named 'var_distribution' that takes a dataset and a
      variable then does the following: Prints the summary, draws histogram,
      creates scatter plot with temperature, and draws a density plot.
    solution: |-
      var_distribution <- function(df, var){
         print(summary(df[,var]))
         hist(df[,var])
         plot(df[,var], df$temp)
         plot(density(df[,var]))
      }
      var_distribution(quality_air, 'ozone')
    output: >-
      The function will print a summary, create a histogram, a scatter plot with
      temperature, and a density plot.
    hints:
      - >-
        Create a function 'var_distribution' and input a data frame and a
        variable.
      - >-
        The function should print the summary, draw histogram, create scatter
        plot with temperature and draw density plot.
    explanation: >-
      This exercise requires students to apply the concepts learned in multiple
      sections of the lesson, reinforcing their understanding of how to analyse
      data distributions and visualize them.
  - text: >-
      Write a function named 'qa_fullcheck' that takes a dataset and a variable
      then does the following: Prints the summary, draws histogram, checks if
      any value is less than zero, draws boxplot, and creates scatter plot with
      temperature.
    solution: |-
      qa_fullcheck <- function(df, var){
         print(summary(df[,var]))
         hist(df[,var])
         print(any(df[,var] < 0))
         boxplot(df[,var], main = paste('Boxplot of', var), ylab=var)
         plot(df[,var], df$temp)
      }
      qa_fullcheck(quality_air, 'ozone')
    output: >-
      The function will print a summary, draw a histogram, print a boolean
      value, create a boxplot and a scatter plot.
    hints:
      - Create a function 'qa_fullcheck' and input a data frame and a variable.
      - >-
        The function should print the summary, draw histogram, print any
        negative values, create boxplot and a scatter plot with temperature.
    explanation: >-
      This exercise combines all the concepts taught in the lesson. Students are
      asked to perform data check, histrogram, checking any negative values,
      boxplot and scatter plot on a dataset in R.
  - text: >-
      Imagine we have a list of variables of interest from the 'quality_air'
      dataset ['ozone', 'so2', 'pm25']. Write a loop to perform automated
      quality assurance for each of these variables using your qa_check
      function.
    solution: |-
      vars <- c('ozone', 'so2', 'pm25')
      for (var in vars){
         qa_check(quality_air, var)
      }
    output: The qa_check function will be applied on each variable in the list.
    hints:
      - Create a vector of variables of interest.
      - Write a for loop to apply the 'qa_check' function on each variable.
    explanation: >-
      Iteration (like for-loop) is a powerful tool in programming, it enables us
      to perform a task multiple times, which is useful in cases like this:
      applying a checking function to multiple variables in a dataset.
