[
  {
    "role": "system",
    "content": "You are an expert R programmer and instructor. You are helping the user write course materials for a course on R programming."
  },
  {
    "role": "user",
    "content": "Please create a set of exercises for the following lesson. Include 1 exercise for each section of the lesson and 3-5 exercises the cover material from multiple sections of the lesson. This last set of exercises should reinforce what was learned in multiple sections of this lesson. The content of course is:\n\n# Basic Statistics in R\n\nIn the previous [lesson](./5-Plotting-with-ggplot2/readme.tmd), we used ggplot2 to create visualizations of air quality data. With the ability to visualize our data, we'll now learn how to describe the data numerically and perform some basic statistical analyses.\n\nWe'll be focusing on descriptive statistics, t-tests, one-way ANOVA, and simple linear regression. You might be familiar with some of these techniques from using Excel, but we'll explore how to perform them in R, where they can be integrated into scripts for automation and reproducibility.\n\n## Descriptive Statistics\n\nTo understand our data, we often start by calculating descriptive or summary statistics. \n\n### Mean and Median\n\nWe can use the `mean()` function to calculate average of a numeric vector. For example, to find the mean ozone level in our chicago_air dataset, we run:\n\n```r\nmean(chicago_air$ozone, na.rm = TRUE)\n```\n\nNote the `na.rm = TRUE` argument, which instructs R to ignore `NA` values when calculating the mean.\n\nThe median, or the middle value in a sorted list of numbers, can be calculated using the `median()` function in the same way.\n\n```r\nmedian(chicago_air$ozone, na.rm = TRUE)\n```\n\n### Standard Deviation and Variance\n\nTo quantify the spread of numeric data, we can compute the standard deviation with the `sd()` function, and the variance with the `var()` function.\n\n```r\n# Standard Deviation\nsd(chicago_air$ozone, na.rm = TRUE)\n\n# Variance\nvar(chicago_air$ozone, na.rm = TRUE)\n```\n\n### Correlation\n\nTo assess the relationship between two numeric variables, we can calculate their correlation using the `cor()` function.\n\n```r\n# Correlation between temperature and ozone\ncor(chicago_air$temp, chicago_air$ozone, use = \"pairwise.complete.obs\")\n```\n\nThe `use = \"pairwise.complete.obs\"` argument asks R to ignore pairs of values that include at least one `NA`.\n\n## T-Tests\n\nThe `t.test()` function in R allows us to conduct t-tests, which can be used to test hypotheses about population means.\n\n```r\n# one-sample t-test: Is the mean ozone concentration different from 0.035 ppm?\nt.test(chicago_air$ozone, mu = 0.035, na.rm = TRUE)\n```\n\nResults are returned in a compact form, stating the t-value, degrees of freedom, and p-value among others. \n\n## One-way ANOVA\n\nAnalysis of variance (ANOVA) can be used to test for the equality of three or more means. We can perform a one-way ANOVA with the `aov()` function. \n\nLet's test whether there's a difference in mean ozone concentration between months.\n\n```r\n# One-way ANOVA of ozone with respect to month\nanova_model <- aov(ozone ~ month, data = chicago_air)\nsummary(anova_model)\n```\n\nThe `summary` function gives us the results including the F-statistic and p-value.\n\n## Simple Linear Regression\n\nFinally, we can build simple linear regression models using the `lm()` function.\n\nLet's fit a model to predict ozone level from temperature:\n\n```r\n# Fit a linear model\nlm_model <- lm(ozone ~ temp, data = chicago_air)\n\n# Display the model's summary\nsummary(lm_model)\n```\n\nThis model's summary provides regression coefficients, standard errors, t-values, and p-values, among other things.\n\nIn this lesson, you've learned how to compute basic statistics in R. In the next [lesson](./7-Data-Transformation-and-Simple-Regression/readme.tmd), we'll transform our data and delve deeper into regression analysis."
  }
]